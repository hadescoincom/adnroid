/*
 * // Copyright 2018 Hds Development
 * //
 * // Licensed under the Apache License, Version 2.0 (the "License");
 * // you may not use this file except in compliance with the License.
 * // You may obtain a copy of the License at
 * //
 * //    http://www.apache.org/licenses/LICENSE-2.0
 * //
 * // Unless required by applicable law or agreed to in writing, software
 * // distributed under the License is distributed on an "AS IS" BASIS,
 * // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * // See the License for the specific language governing permissions and
 * // limitations under the License.
 */

package com.hds.hdswallet.screens.receive

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.Observer
import com.hds.hdswallet.base_screen.BasePresenter
import com.hds.hdswallet.core.AppManager
import com.hds.hdswallet.core.entities.WalletAddress
import com.hds.hdswallet.core.helpers.*
import com.hds.hdswallet.core.utils.subscribeIf
import io.reactivex.disposables.Disposable

/**
 *  11/13/18.
 */
class ReceivePresenter(currentView: ReceiveContract.View, currentRepository: ReceiveContract.Repository, private val state: ReceiveState)
    : BasePresenter<ReceiveContract.View, ReceiveContract.Repository>(currentView, currentRepository),
        ReceiveContract.Presenter {

    private lateinit var walletIdSubscription: Disposable
    private val changeAddressLiveData = MutableLiveData<WalletAddress>()
    private var categorySubscription: Disposable? = null

    private var oldName:String? = null
    private var oldDuration = 0L

    override fun onViewCreated() {
        super.onViewCreated()

        view?.init()

        val address = view?.getWalletAddressFromArguments()

        initViewAddress(address)

        val amount = view?.getAmountFromArguments()
        if (amount != null && amount > 0) {
            view?.setAmount(amount.convertToHds())
        }

        changeAddressLiveData.observe(view!!.getLifecycleOwner(), Observer {
            if (it.walletID != state.address?.walletID) {
                oldName = it.label
                oldDuration = it.duration
                state.address = it
                state.tags.clear()
                initViewAddress(it)
            }
        })
    }

    override fun onDestroy() {
        categorySubscription?.dispose()

        super.onDestroy()
    }

    fun setAddressName(name:String) {
        state.address?.label = name
    }

    fun setTags(tags: List<Tag>) {
        state.tags.clear()
        state.tags.addAll(tags)
    }

    override fun onAddressLongPressed() {
        saveAddress()
        view?.vibrate(100)
        view?.copyAddress(state.address?.walletID ?: "")
    }

    private fun initViewAddress(address: WalletAddress?) {
        if (address != null) {
            state.address = address
            state.expirePeriod = if (address.duration == 0L) ExpirePeriod.NEVER else ExpirePeriod.DAY
            state.isNeedGenerateAddress = false
            state.wasAddressSaved = state.generatedAddress?.walletID != address.walletID
        }

        state.address?.let {
            view?.initAddress(state.isAutogeneratedAddress(), it)

            if (state.tags.count() != 0 )
            {
                view?.setTags(state.tags)
            }
            else{
                view?.setTags(repository.getAddressTags(it.walletID))
            }
        }

    }

    override fun onResume() {
        super.onResume()

        view?.setupTagAction(repository.getAllTags().isEmpty())
        view?.handleExpandAdvanced(state.expandAdvanced)
        view?.handleExpandEditAddress(state.expandEditAddress)
    }

    override fun onBackPressed() {
        requestSaveAddress {
            view?.close()
        }
    }

    private fun requestSaveAddress(nextStep: () -> Unit) {
        if (isAddressInfoChanged() && !state.wasAddressSaved) {
            view?.showSaveChangesDialog(nextStep)
        }
        else if (!state.wasAddressSaved) {
            view?.showSaveAddressDialog(nextStep)
        }
        else if (isAddressInfoChanged()) {
            view?.showSaveChangesDialog(nextStep)
        }
        else {
            saveAddress()
            nextStep()
        }
    }

    override fun onSaveAddressPressed() {
        saveAddress()
    }

    override fun onShareTokenPressed() {
        if (state.address != null) {
            saveAddress()
            view?.shareToken(state.address!!.walletID)
        }
    }

    override fun onChangeAddressPressed() {
        view?.showChangeAddressFragment(state.generatedAddress)
    }

    override fun onAdvancedPressed() {
        state.expandAdvanced = !state.expandAdvanced
        view?.handleExpandAdvanced(state.expandAdvanced)
    }

    override fun onEditAddressPressed() {
        state.expandEditAddress = !state.expandEditAddress
        view?.handleExpandEditAddress(state.expandEditAddress)
    }

    override fun onShowQrPressed() {
        saveAddress()
        state.address?.let { address ->
            view?.showQR(address, view?.getAmount()?.convertToGroth(), state.isAutogeneratedAddress())
        }
    }

    override fun onExpirePeriodChanged(period: ExpirePeriod) {
        state.expirePeriod = period
        state.address?.duration = period.value
    }

    override fun onTagActionPressed() {
        if (repository.getAllTags().isEmpty()) {
            view?.showCreateTagDialog()
        } else {
            view?.showTagsDialog(state.tags)
        }
    }

    private fun isAddressInfoChanged(): Boolean {
        val savedTags = state.address?.walletID?.let { repository.getAddressTags(it) }

        if (state.address?.label != view?.getComment()) {
            return true
        }
        else if (state.address?.duration != state.expirePeriod.value) {
            return true
        }
        else if (state.tags.size != savedTags?.size) {
            return true
        }
        else if (!state.tags.containsAll(savedTags) && state.tags.count() > 0) {
            return true
        }
        else if (oldName!=null){
            val oldAddress = AppManager.instance.getAddress(state?.address?.walletID)
            if (oldAddress!=null) {
                if (oldName != state?.address?.label) {
                    return true
                }
                else if (oldDuration != state?.address?.duration) {
                    return true
                }
            }
        }
        return false
    }

    override fun initSubscriptions() {
        super.initSubscriptions()

        walletIdSubscription = repository.generateNewAddress().subscribeIf(state.isNeedGenerateAddress) {
            if (state.address == null) {
                val tr = AppManager.instance.getAllTransactionsByAddress(it.walletID)
                if (tr.count() == 0 && AppManager.instance.lastGeneratedAddress != it.walletID)
                {
                    AppManager.instance.lastGeneratedAddress = it.walletID

                    state.address = it
                    state.generatedAddress = it
                    view?.initAddress(true, it)
                    view?.setTags(repository.getAddressTags(it.walletID))
                    state.isNeedGenerateAddress = false
                }
            }
        }

        if (categorySubscription==null)
        {
            categorySubscription = TagHelper.subOnCategoryCreated.subscribe(){
                if (it!=null) {
                    state.tags.clear()
                    state.tags.add(it)
                }
            }
        }
    }

    override fun onAddressChanged(walletAddress: WalletAddress) {
        changeAddressLiveData.postValue(walletAddress)
    }

    override fun onSelectTags(tags: List<Tag>) {
        state.tags.clear()
        state.tags.addAll(tags)
        view?.setTags(tags)
    }

    private fun saveAddress() {
        state.address?.let { address ->
            address.duration = state.expirePeriod.value

            val comment = view?.getComment()
            address.label = comment ?: ""

            view?.getTxComment()?.let {
                if (it.isNotBlank()) {
                    ReceiveTxCommentHelper.saveCommentToAddress(address.walletID, it)
                }
            }

            if (state.wasAddressSaved) {
                repository.updateAddress(address, state.tags)
            } else {
                repository.saveAddress(address, state.tags)
            }

            repository.saveTagsForAddress(address.walletID, state.tags)

            state.wasAddressSaved = true
            state.isNeedGenerateAddress = false
        }
    }

    override fun onCreateNewTagPressed() {
        view?.showAddNewCategory()
    }

    override fun getSubscriptions(): Array<Disposable>? = arrayOf(walletIdSubscription)

    override fun hasStatus(): Boolean = true
}
